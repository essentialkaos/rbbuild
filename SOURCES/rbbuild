#!/usr/bin/env bash
# shellcheck disable=SC2034,SC2086,SC2154

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

# App name (String)
APP="RBBuild"

# App version (String)
VER="2.2.0"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"
CL_BG_RED="\e[7;${RED};49m"
CL_BG_GREEN="\e[7;${GREEN};49m"
CL_BG_YELLOW="\e[7;${YELLOW};49m"
CL_BG_BLUE="\e[7;${BLUE};49m"
CL_BG_MAG="\e[7;${MAG};49m"
CL_BG_CYAN="\e[7;${CYAN};49m"
CL_BG_GREY="\e[7;${GREY};49m"

################################################################################

SUPPORTED_OPTS="dest_dir !help mirror output !quiet tmp threads 
 !verbose !version cc_comp cxx_comp !mirror_list !ignore_checksums dl_cache 
 !rbenv name proxy !debug !yes !force !no_patch !no_colors !no_spinner 
 !ignore_loadavg"

SHORT_OPTS="h:!help d:!dest_dir m:mirror o:output q:!quiet T:tmp N:name 
 t:threads V:!verbose v:!version y:!yes P:proxy L:!mirror_list D:!debug 
 ic:!ignore_checksums dc:dl_cache r:!rbenv cc:cc_comp cxx:cxx_comp 
 f:!force np:!no_patch nc:!no_colors ns:!no_spinner il:!ignore_loadavg"

################################################################################

# Path to libexec directory
LIBEXEC_DIR="/usr/libexec/rbbuild"

# Path to directory with def files
DEFS_DIR="/usr/local/share/rbbuild"

################################################################################

# Maximum lines from log for failed build (Number)
LOG_TAIL_SIZE=30

# Maximum redirects during download process (Number)
MAX_REDIRS=10

# Maximum load avearage (Number)
MAX_LA=5

################################################################################

CWD=$(pwd)
PID="$$"

################################################################################

output=/dev/tty
verb_output=/dev/null
tmp="/var/tmp"

log=""
tmp_dir=""
def_file=""
require_patching=""
require_autoconf=""

mirror="${mirror:-default}"

################################################################################

ruby_bin=$(command -v "ruby")
java_bin=$(command -v "java")

################################################################################

declare -A allowed_vars=(
  ["prefix"]="1"
  ["os_name"]="1"
  ["os_arch"]="1"
  ["os_arch_alt"]="1"
  ["os_arnm"]="1"
  ["os_dist"]="1"
  ["os_kern"]="1"
  ["gcc_version"]="1"
  ["clang_version"]="1"
  ["java_version"]="1"
  ["ruby_version"]="1"
)

################################################################################

declare -A _requires

################################################################################

main() {
  if [[ ! -t 1 || -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" ]] ; then
    usage
    exit 0
  fi

  show ""

  if [[ -n "$mirror_list" ]] ; then
    require "list"
    list.mirrors "$@"
  elif [[ $# -eq 0 ]] ; then
    require "list"
    list.defs
  else
    require "build"
    build.start "$@"
  fi

  show ""

  finish $?
}

# Load libexec script
#
# 1: Script name without extension (String)
#
# Code: No
# Echo: No
require() {
  local script="${1}.shx"

  # File already loaded, skip it
  if [[ "${_requires[$script]}" -eq 1 ]] ; then
    return
  fi

  if [[ ! -e "$LIBEXEC_DIR/$script" ]] ; then
    error "Can't find file $script in libexec directory ($LIBEXEC_DIR)"
    exit 1
  fi

  if [[ ! -r "$LIBEXEC_DIR/$script" ]] ; then
    error "File $LIBEXEC_DIR/$script is not readable"
    exit 1
  fi

  if [[ ! -s "$LIBEXEC_DIR/$script" ]] ; then
    error "File $LIBEXEC_DIR/$script is empty"
    exit 1
  fi

  _requires[$script]=1

  # shellcheck disable=SC1090
  source "$LIBEXEC_DIR/$script"
}

# Finish script execution
#
# 1: Exit code (Number)
#
# Code: No
# Echo: No
finish() {
  if [[ -z "$debug" && -d "$tmp_dir" ]] ; then
    rm -rf "$tmp_dir" &> /dev/null
  fi

  if [[ "$CWD" != "$(pwd)" ]] ; then
    cd "$CWD" || exit 1
  fi

  exit "${1:-0}"
}

################################################################################

# Show message
#
# 1: Message (String)
# 2: Color code (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Show message without newline symbol
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Code: No
# Echo: No
showm() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Show message about executed build command
#
# *: Command with arguments
#
# Code: No
# Echo: No
showc() {
  local win_width

  win_width=$(stty size 2>/dev/null | cut -f2 -d' ')

  printf "\n${CL_BOLD}\e[48;5;57m%-${win_width:-88}s${CL_NORM}\n\n" " → $*"
}

# Show formated message with option info
#
# 1: Option (String)
# 2: Description (String)
# 3: Arguments (String) [Optional]
#
# Code: No
# Echo: No
showo() {
  local optn optd optp optt optf breadcrumbs

  optn="$1"
  optd="$2"
  optp="$3"

  if [[ -n "$DARK" ]] ; then
    breadcrumbs="............................"
  else
    breadcrumbs="                            "
  fi

  if [[ -z "$optp" ]] ; then
    optt="$optn"
    optf=$(( 26 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  else
    optt="$optn $optp"
    optf=$(( 26 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_GREY}${optp}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "▲ $*" $RED 1>&2
}

# Print warning message
#
# 1: Message (String)
#
# Code: No
# Echo: No
warn() {
  show "▲ $*" $YELLOW 1>&2
}

# Show message about unknown option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Error! Unknown option $1"
  exit 1
}

# Show usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} rbbuild ${CL_GREEN}{options}${CL_NORM} def-file target-dir"
  show ""
  show "${CL_BOLD}Options${CL_NORM}"
  show ""
  showo "--threads, -t"           "Number of threads for build process"                                            "num"
  showo "--no-patch, -np"         "Skip patch directives in definition file"
  showo "--cc-comp, -cc"          "Path to C compiler"                                                             "path/name"
  showo "--cxx-comp, -cxx"        "Path to C++ compiler" "path"                                                    "path/name"
  showo "--ignore-checksums, -ic" "Skip checksum check"
  showo "--ignore-loadavg, -il"   "Ignore check for high LA"
  showo "--mirror, -m"            "Mirror name for downloading source archives from it"                            "name"
  showo "--mirror-list, -L"       "Show list of all available mirrors"
  showo "--dl-cache, -dc"         "Path to download cache"                                                         "path"
  showo "--rbenv, -r"             "Automatically install to rbenv"
  showo "--name, -rn"             "Define name of ruby in rbenv (${CL_GREEN}--rbenv${CL_NORM} required)"           "name"
  showo "--proxy, -P"             "Use HTTP proxy on given host and port"                                          "url"
  showo "--debug, -D"             "Don't remove build directory and other build data after installation"
  showo "--output, -O"            "Output path (default /dev/stdout)"                                              "path"
  showo "--quiet, -q"             "Quiet mode"
  showo "--verbose, -V"           "Verbose mode"
  showo "--tmp, -T"               "Path to temporary directory (used for unpacking files and build process)"       "path"
  showo "--yes, -y"               "Answer \"yes\" to all questions"
  showo "--force, -f"             "Reuse install directories"
  showo "--no-colors, -nc"        "Don't use colors in output"
  showo "--no-spinner, -ns"       "Don't show spinner"
  showo "--help, -h"              "Show this help message"
  showo "--version, -v"           "Show information about version"
  show ""
  show "${CL_BOLD}Examples${CL_NORM}"
  show ""
  show "  rbbuild 2.7.5 /home/user/ruby-2.7.5 -t 4 -m essentialkaos -y"
  show "  rbbuild 3.0.5 /home/user/ruby-3.0.5"
  show "  rbbuild 3.1.1 -r"
  show ""
}

# Show version and license info
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}${APP}${CL_NORM} ${CL_CYAN}${VER}${CL_NORM} - Utility for compiling and installing different Ruby versions"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
