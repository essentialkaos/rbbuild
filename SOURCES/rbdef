#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154,SC2181

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

# App name (String)
APP="RBBuild Def Utils"

# App version (String)
VER="1.6.0"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

## OS NAMES ####################################################################


# Name of Linux OS (String)
OS_LINUX="linux"

# Name of Solaris OS (String)
OS_SOLARIS="solaris"

# Name of BSD OS (String)
OS_BSD="bsd"

# Name of linux distr (String)
DIST_ARCH="arch"

# Name of linux distr (String)
DIST_CENTOS="centos"

# Name of linux distr (String)
DIST_DEBIAN="debian"

# Name of linux distr (String)
DIST_FEDORA="fedora"

# Name of linux distr (String)
DIST_GENTOO="gentoo"

# Name of linux distr (String)
DIST_RHEL="rhel"

# Name of linux distr (String)
DIST_UBUNTU="ubuntu"

# OS INFO ######################################################################

# Current OS name (String)
os_name=""

# Current OS arch (String)
os_arch=""

# Current OS arch name (String)
os_arnm=""

# Current OS distr (String)
os_dist=""

# Current OS kernel version (String)
os_kern=""

################################################################################

# List of supported command line arguments (String)
SUPPORTED_ARGS="!help !usage !version !ver !remove !force author bucket 
 !public_uploads !reduced_redundancy !no_colors"

# List of supported short command line arguments (String)
SHORT_ARGS="h:!help v:!version r:!remove f:!force rr:!reduced_redundancy 
 pu:!public_uploads a:author b:bucket nc:!no_colors"

ARCH_TYPES=(".tar.gz" ".tgz" ".tar.bz2" ".tbz2" ".tb2" ".tbz" "tar.xz" ".txz" ".zip" ".7z")
PATCH_TYPES=(".patch" ".diff")

PREFS_FILE="$HOME/.rbdef"

# Current working dir (String)
CWD=$(pwd)

################################################################################

author=""
bucket=""
public_uploads=""
reduced_redundancy=""

################################################################################

# Main function
#
# *: All arguments except parsedrbinstall
#
# Code: No
# Echo: No
main() {
  if [[ ! -t 1 || -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
  fi

  [[ -n "$version" || -n "$ver" ]] && about && doExit
  [[ $# -eq 0 || -n "$help" || -n "$usage" ]] && usage && doExit

  local cmnd="$1"

  shift

  detectOs

  case $cmnd in
    "repack")  repack "$@" ;;
    "replace") replace "$@" ;;
    "crc")     crc "$@" ;;
    "rec")     getRecord "$@" ;;
    "proc")    proc "$@" ;;
    "upload")  upload "$@" ;;
    *) error "Unknown command $cmnd" ;;
  esac

  doExit
}

# # Archive repacking to 7z
#
# *: Files
#
# Code: No
# Echo: No
repack() {
  local file url file_name arch_dir
  local prev_size new_size size_diff

  for file in "$@" ; do
    if [[ $file =~ http:|https:|ftp: ]] ; then
      url=$(parseArgsInString "$file")
      file_name=$(basename "$url")

      show "Downloading ${CL_BOLD}$file_name${CL_NORM}… "

      curl -k --max-redirs 10 -L -# "$url" -o "$file_name"
    elif checkPerms "FR" "$file" ; then
      file_name="$file"
    else
      error "Can't find file for repack"
      doExit 1
    fi

    if ! checkArch "$file_name" ; then
      rm -f "$file_name"
      doExit 1
    fi

    showm "Unpacking file ${CL_BOLD}$file_name${CL_NORM}… "

    arch_dir=$(unpack "$file_name")

    if [[ -z "$arch_dir" ]] ; then
      error "FAIL"
      error "Can't unpack file $file_name. Exiting…"
      doExit 1
    fi

    show "DONE" $GREEN
    showm "Packing to ${CL_BOLD}$arch_dir.7z${CL_NORM}… "

    rm -rf "$arch_dir.7z" &> /dev/null
    7za a -t7z -mx=9 "$arch_dir.7z" "$arch_dir" &> /dev/null

    prev_size=$(getHumanFileSize "$file_name")
    new_size=$(getHumanFileSize "$arch_dir.7z")
    size_diff=$(getSizeDiff "$file_name" "$arch_dir.7z")

    show "${CL_GREEN}DONE${CL_NORM} ${CL_DARK}(${prev_size} → ${new_size} / -${size_diff}%)${CL_NORM}"

    [[ -n "$remove" ]] && rm -rf "$file_name" &> /dev/null

    rm -rf "$arch_dir" &> /dev/null

    crc "$arch_dir.7z"
  done
}

# Create record line for given url
#
# 1: URL (String)
#
# Code: No
# Echo: rbdef data record (String)
getRecord() {
  local url file_name file_type checksum

  url=$(parseArgsInString "$1")
  file_name=$(basename "$url")
  file_type=$(getFileType "$file_name")

  if [[ "$file_name" != "git" && "$file_name" != "hg" && "$file_name" != "svn" ]] ; then
    show "Downloading ${CL_BOLD}$file_name${CL_NORM}… "

    curl -k --max-redirs 10 -L -# "$url" -o "$file_name"

    checksum=$(makeCRC "$file_name")

    show "Record:" $BOLD

    if [[ "$file_name" == "package" ]] ; then
      show "  $file_type: \"$clean_name\" \"$url\" \"$checksum\""
    else
      show "  $file_type: \"$url\" \"$checksum\""
    fi

    rm -rf "$file_name" &> /dev/null
  else
    error "Can't generate record for repo"
    doExit 1
  fi
}

# Replace record in def file by pattern
#
# *: List of def files
#
# Code: No
# Echo: No
replace() {
  local line_num tmp_file orig_file target_name

  show "Enter search pattern:" $CYAN
  read -r -e -p "> " pattern_answer
  show ""

  show "Enter replace string:" $CYAN
  read -r -e -p "> " replace_answer
  show ""

  for file in "$@" ; do
    target_name=$(basename "$file")

    showm "Processing file ${CL_BOLD}$target_name${CL_NORM}… "

    if ! checkPerms "FRW" "$file" ; then
      error "FAIL"
      error "You don't have enough permissions for modify file $file"
      continue
    fi

    tmp_file=$(mktemp)
    orig_file=$(mktemp)

    grep -v "#" "$file" >> "$orig_file"
    grep -v "#" "$file" >> "$tmp_file"

    if grep -q "$pattern_answer" "$orig_file" ; then
      line_num=$(grep -n "$pattern_answer" "$orig_file" | head -1 | cut -f1 -d":")

      for line in $line_num ; do
        replaceLine "$line_num" "$replace_answer" "$tmp_file"
      done

      echo -n > "$file"
      addHeader "$file"

      cat "$tmp_file" >> "$file"
      rm -f "$tmp_file" "$orig_file" &> /dev/null

      show "DONE" $GREEN
    else
      show "NOT FOUND" $YELLOW
      rm -f "$tmp_file" "$orig_file" &> /dev/null
    fi
  done
}

# Generate checksums def records
#
# *: List of def files
#
# Code: No
# Echo: No
proc() {
  local line tmp_file target_name

  for file in "$@" ; do
    target_name=$(basename "$file")

    showm "Processing file ${CL_BOLD}${target_name}${CL_NORM}… "

    if ! checkPerms "FRW" "$file" ; then
      error "FAIL"
      error "You don't have enough permissions for modify file $file"
      continue
    fi

    tmp_file=$(mktemp)

    addHeader "$tmp_file"

    local rec url crc file_name new_crc

    while read -r line ; do
      if [[ $line =~ patch:|patchset:|package: ]] ; then
        IFS=" " read -r -a rec <<< "${line//\"/}"

        if [[ $line =~ patch:|patchset: ]] ; then
          url="${rec[1]}"
          crc="${rec[2]}"
        else
          url="${rec[2]}"
          crc="${rec[3]}"
        fi

        url=$(parseArgsInString "$url")

        if [[ ${#crc} -eq 40 && -z "$force" ]] ; then
          echo "  $line" >> "$tmp_file" && continue
        fi

        file_name=$(basename "$url")

        if ! checkPerms "FR" "$file_name" || [[ -n "$force" ]] ; then
          curl -s -k --max-redirs 10 -L -# "$url" -o "$file_name"
        fi

        new_crc=$(makeCRC "$file_name")

        [[ -n "$remove" ]] && rm -rf "$file_name" &> /dev/null

        if [[ -n "$crc" ]] ; then
          echo "  ${line//\"${crc}\"/\"${new_crc}\"}" >> "$tmp_file"
        else
          echo "  ${line} \"${new_crc}\"" >> "$tmp_file"
        fi
      elif [[ $line =~ git:|svn:|hg: ]] ; then
        echo "  $line" >> "$tmp_file"
      else
        if [[ ${line:0:1} != "#" ]] ; then
          echo "$line" >> "$tmp_file"
        fi
      fi
    done < <(awk 1 "$file")

    cat "$tmp_file" > "$file"

    rm -f "$tmp_file"

    show "DONE" $GREEN
  done
}

# # Generate SHA checksum for given file or url
#
# 1: File or URL (String)
#
# Code: No
# Echo: No
crc() {
  local file crc url file_name

  if checkPerms "FR" "$1" ; then
    file="$1"
    crc=$(makeCRC "$file")
    show "${CL_BOLD}SHA1:${CL_NORM} $crc"
  elif [[ $1 =~ http:|https:|ftp: ]]; then
    url=$(parseArgsInString "$1")
    file_name=$(basename "$url")

    show "Downloading $file_name… "

    curl -k --max-redirs 10 -L -# "$url" -o "$file_name"
    crc=$(makeCRC "$file_name")

    show "${CL_BOLD}SHA1:${CL_NORM} $crc"

    [[ -n "$remove" ]] && rm -rf "$file_name" &> /dev/null
  else
    error "Can't make CRC checksum for file $1. File is not exist or not readable."
    doExit 1
  fi
}

# Check archive
#
# 1: Archive file (String)
#
# Code: Yes
# Echo: No
checkArch() {
  local file_size
  local arch="$1"

  file_size=$(stat -c '%s' "$arch")

  if [[ $file_size -lt 1024 ]] ; then
    error "Looks like file $arch is not an archive file"
    return 1
  fi

  return 0
}

# Unpack archive
#
# 1: Archive file (String)
#
# Code: No
# Echo: Name of directory in archive (String)
unpack() {
  local name arch

  arch="$1"

  rm -rf .tmp &> /dev/null
  mkdir .tmp &> /dev/null

  if [[ $arch =~ .tar.gz$|.tgz$ ]] ; then
    tar xzf "$arch" -C .tmp &> /dev/null
  elif [[ $arch =~ .tar.bz2$|.tbz2$ ]] ; then
    tar xjf "$arch" -C .tmp &> /dev/null
  elif [[ $arch =~ .zip$ ]] ; then
    unzip "$arch" -d .tmp &> /dev/null
  else
    echo "" && return 1
  fi

  if [[ $? -ne 0 ]] ; then
    echo "" && return 1
  fi

  name=$(ls .tmp)

  if [[ $name =~ truffleruby ]] ; then
    mv ".tmp/$name" ./${name//-linux-amd64/}
    name=${name//-linux-amd64/}
  else
    mv ".tmp/$name" .
  fi

  rm -rf .tmp &> /dev/null

  echo "$name" && return 0
}

# Upload files to s3 bucket
#
# 1: Path to file (String)
#
# Code: No
# Echo: No
upload() {
  if [[ -z "$bucket" ]] ; then
    show "Please define <bucket> property in preferencies file before upload." $YELLOW
    doExit 1
  fi

  show "Uploading files to $bucket…"
  show ""

  local file adds

  [[ -n "$public_uploads" ]] && adds="--acl-public "
  [[ -n "$reduced_redundancy" ]] && adds="$adds --reduced-redundancy"

  for file in "$@" ; do
    if [[ -r "$file" ]] ; then
      # shellcheck disable=SC2086
      s3cmd --no-preserve $adds put "$file" "$bucket/"
    fi
  done

  show ""
}

# Generate SHA-1 checksum
#
# 1: File (String)
#
# Code: No
# Echo: SHA checksum (String)
makeCRC() {
  sha1sum "$1" | cut -f1 -d" "
}

# Get file type
#
# 1: File name or URL (String)
#
# Code: No
# Echo: Type (package|git|patch) (String)
getFileType() {
  local file_name="$1"

  if [[ $file_name =~ .tar.gz$|.tgz$|.tar.bz2$|.tbz2$|.zip$|.7z$ ]] ; then
    echo "package" && return 0
  elif [[ $file_name =~ .git ]]; then
    echo "git" && return 0
  elif [[ $file_name =~ .hg ]]; then
    echo "hg" && return 0
  elif [[ $file_name =~ .svn ]]; then
    echo "svn" && return 0
  elif [[ $file_name =~ .patch$|.diff$ ]]; then
    echo "patch" && return 0
  else
    echo "" && return 1
  fi
}

# Replace parts of name
#
# 1: Name (String)
# *: Replacements
#
# Code: No
# Echo: Result (String)
cleanName() {
  local name rmv

  name="$1"

  shift

  for rmv in "$@" ; do
    name="${name//$rmv/}"
  done

  echo "$name"
}

# Add header comment to def file
#
# 1: Def file (String)
#
# Code: No
# Echo: No
addHeader() {
  local file date

  file="$1"
  date=$(date +"%d/%b/%Y %R:%S")

  echo "# RBBuild Def File" >> "$file"
  echo "# UPDATED $date by $author" >> "$file"
}

################################################################################

# Check permissions for file or directory
#
# 1: Permissions (String)
# 2: File or directory (String)
#
# Code: No
# Echo: No
checkPerms() {
  local perms path

  perms=$(echo "$1" | tr "[:lower:]" "[:upper:]")
  path="$2"

  for perm in $(echo "$perms" | fold -w1) ; do
    case $perm in
      "R") [[ ! -r "$path" ]] && return 1 ;;
      "W") [[ ! -w "$path" ]] && return 1 ;;
      "E") [[ ! -e "$path" ]] && return 1 ;;
      "D") [[ ! -d "$path" ]] && return 1 ;;
      "F") [[ ! -f "$path" ]] && return 1 ;;
      "S") [[ ! -s "$path" ]] && return 1 ;;
      "H") [[ ! -h "$path" ]] && return 1 ;;
      *) return 1
    esac
  done

  return 0
}

# Replace line in def file
#
# 1: Line number (Number)
# 2: New line (String)
# 3: File (String)
#
# Code: No
# Echo: No
replaceLine() {
  local linenum newline filename curline temp

  linenum="$1"
  newline="$2"
  filename="$3"
  curline=1
  temp=$(mktemp)

  if [[ $newline =~ patch:|patchset:|package: ]] ; then
    newline="  $newline"
  fi

  while IFS='' read -r line ; do
    if [[ $linenum -eq $curline ]] ; then
      echo "$newline" >> "$temp"
    else
      echo "$line" >> "$temp"
    fi

    ((curline++))
  done < "$filename"

  mv "$temp" "$filename"
}

# Parse and evaluate variables in text
#
# 1: Text (String)
#
# Return: none
# Echo: Result (String)
parseArgsInString() {
  local data="$*"

  if [[ ! $data =~ \$ ]] ; then
    echo "$data" && return 0
  else
    local prm_name

    while : ; do
      if [[ "$data" =~ \$\{([A-Za-z0-9_?]{3,})\} ]] ; then
        prm_name="${BASH_REMATCH[1]}"
      else
        break
      fi

      data="${data//$\{$prm_name\}/${!prm_name}}"
    done

    echo "$data" && return 0
  fi
}

# Detect OS info
#
# Code: No
# Echo: No
detectOs() {
  os_name=$(uname -s)

  if [[ "$os_name" == "SunOS" ]] ; then
    os_name=$OS_SOLARIS
  elif [[ "$os_name" == "Linux" ]] ; then
    os_name="$OS_LINUX"
    os_kern=$(uname -r)

    if [[ -f /etc/arch-release ]] ; then
      os_dist=$DIST_ARCH
    elif [[ -f /etc/fedora-release ]] ; then
      os_dist=$DIST_FEDORA
    elif [[ -f /etc/gentoo-release ]] ; then
      os_dist=$DIST_GENTOO
    elif [[ -f /etc/redhat-release ]] ; then
      os_dist=$DIST_RHEL
    elif [[ -f /etc/SuSE-release ]] ; then
      os_dist=$DIST_SUSE
    elif [[ -f /etc/lsb-release ]] ; then
      os_dist=$DIST_UBUNTU
    fi
  fi

  os_arch=$(uname -p)

  if [[ "$os_arch" == "x86_64" && "$os_name" == "$OS_LINUX" ]] ; then
    os_arnm="linux64"
  elif [[ "$os_arch" == "i386" && "$os_name" == "$OS_LINUX" ]]; then
    os_arnm="linux32"
  fi
}

# Return size diff
#
# 1: File #1 (String)
# 2: file #2 (String)
#
# Code: No
# Echo: Diff (Number)
getSizeDiff() {
  local size1 size2

  size1=$(stat -c '%s' "$1")
  size2=$(stat -c '%s' "$2")

  echo "scale=3; 100-((${size2}/${size1})*100)" | bc | sed 's/00$//'
}

# Print human size of file
#
# 1: File (String)
#
# Code: No
# Echo: Size (String)
getHumanFileSize() {
  du -kh "$1" | cut -f1
}

# Exit from utility
#
# 1: Exit code (Number) [Optional]
#
# Code: No
# Echo: No
doExit() {
  exit "${1-0}"
}

################################################################################

# Show message about unsupported argument
#
# 1: Argument name (String)
#
# Code: No
# Echo: No
showArgWarn() {
  error "Error! You used unsupport argument $1. Please check command syntax."
  doExit 1
}

# Show message
#
# 1: Message (String)
# 2: Color code (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Show message without newline symbol
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Return: none
# Echo: none
showm() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Show formated message with option info
#
# 1: Option (String)
# 2: Description (String)
# 3: Arguments (String) [Optional]
#
# Code: No
# Echo: No
showo() {
  local ent_name ent_desc optp optt optf breadcrumbs

  ent_clr="$1"
  ent_name="$2"
  ent_desc="$3"
  ent_args="$4"

  if [[ -n "$DARK" ]] ; then
    breadcrumbs="............................"
  else
    breadcrumbs="                            "
  fi

  if [[ -z "$ent_args" ]] ; then
    optt="$ent_name"
    optf=$(( 28 - ${#optt} ))
    echo -e "  ${ent_clr}${ent_name}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $ent_desc"
  else
    optt="$ent_name $ent_args"
    optf=$(( 28 - ${#optt} ))
    echo -e "  ${ent_clr}${ent_name}${CL_NORM} ${CL_GREY}${optp}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $ent_desc"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# -
#
# Show usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} rbdef ${CL_GREEN}{options}${CL_NORM} ${CL_YELLOW}{command}${CL_NORM} arguments…"
  show ""
  show "Commands:" $BOLD
  show ""
  showo "$CL_YELLOW" "repack"  "Repack source archive to 7z"
  showo "$CL_YELLOW" "replace" "Find and replace records in def files"
  showo "$CL_YELLOW" "proc"    "Add SHA-1 checksum to records in def files"
  showo "$CL_YELLOW" "crc"     "Generate CRC for given file or URL"
  showo "$CL_YELLOW" "rec"     "Create record line from URL"
  showo "$CL_YELLOW" "upload"  "Upload source archive to S3 mirror"
  show ""
  show "Options:" $BOLD
  show ""
  showo "$CL_GREEN" "--remove, -r"              "Remove downloaded sources (use with ${CL_YELLOW}repack${CL_NORM} or ${CL_YELLOW}proc${CL_NORM} command)"
  showo "$CL_GREEN" "--force, -f"               "Always download sources while def processing (use with ${CL_YELLOW}proc${CL_NORM} command)"
  showo "$CL_GREEN" "--author, -a"              "Author of def file (use with ${CL_YELLOW}proc${CL_NORM} command)"
  showo "$CL_GREEN" "--bucket, -b"              "Make sources readable by anyone (use with ${CL_YELLOW}upload${CL_NORM} command)"
  showo "$CL_GREEN" "--public-uploads, -p"      "Change S3 ACL to public for sources (use with ${CL_YELLOW}upload${CL_NORM} command)"
  showo "$CL_GREEN" "--reduced-redundancy, -rr" "Use reduced redundancy storage class (use with ${CL_YELLOW}upload${CL_NORM} command)"
  showo "$CL_GREEN" "--no-colors, -nc"          "Disable colors in output"
  showo "$CL_GREEN" "--help"                    "Show this help message"
  showo "$CL_GREEN" "--version, -v"             "Show information about version"
  show ""
}

# -
#
# Show version and license info
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Utility for working with RBBuild def files"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Essential Kaos Open Source License <https://essentialkaos.com/ekol>" $DARK
  show ""
}

## PREFS PARSING ###############################################################

unset arg argn argp

PREFS_FILE="${PREFS_FILE//\~/$HOME}"

if [[ -n "$PREFS_FILE" && -r "$PREFS_FILE" ]] ; then
  while read -r arg ; do
    IFS=":" read -r argn argp <<< "${arg//: /:}"
    [[ $SUPPORTED_ARGS\  =~ !?$argn\  ]] && declare "$argn=$argp"
  done < <(awk 1 "$PREFS_FILE")

  unset arg argn argp
fi

## ARGUMENTS PARSING 4 #################################################################

[[ $# -eq 0 ]] && main && exit $?

unset arg argn argm argv argt argk

argv="$*" ; argt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$argn" ]] ; then
    declare "$argn=$1"

    unset argn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    argm=${1:1}

    if [[ \ $SHORT_ARGS\  =~ \ $argm:!?([a-zA-Z0-9_]*) ]] ; then
      arg="${BASH_REMATCH[1]}"
    else
      declare -F showArgWarn &>/dev/null && showArgWarn "-$argm"
      shift && continue
    fi

    if [[ -z "$argn" ]] ; then
      argn=$arg
    else
      # shellcheck disable=SC2015
      [[ -z "$argk" ]] && ( declare -F showArgValWarn &>/dev/null && showArgValWarn "--$argn" ) || declare "$argn=true"
      argn=$arg
    fi

    if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
      declare -F showArgWarn &>/dev/null && showArgWarn "-$argm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$argn=true" ; unset argn ; argk=true
    else
      unset argk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    arg=${1:2}

    if [[ $arg == *=* ]] ; then
      IFS="=" read -ra arg <<< "$arg"

      argm="${arg[0]}" ; argm=${argm//-/_}

      if [[ ! $SUPPORTED_ARGS\  =~ $argm\  ]] ; then
        declare -F showArgWarn &>/dev/null && showArgWarn "--${arg[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!argm}" && $MERGEABLE_ARGS\  =~ $argm\  ]] && declare "$argm=${!argm} ${arg[*]:1:99}" || declare "$argm=${arg[*]:1:99}"

      unset argm && shift && continue
    else
      # shellcheck disable=SC2178
      arg=${arg//-/_}

      if [[ -z "$argn" ]] ; then
        # shellcheck disable=SC2128
        argn=$arg
      else
        # shellcheck disable=SC2015
        [[ -z "$argk" ]] && ( declare -F showArgValWarn &>/dev/null && showArgValWarn "--$argn" ) || declare "$argn=true"
        # shellcheck disable=SC2128
        argn=$arg
      fi

      if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
        declare -F showArgWarn &>/dev/null && showArgWarn "--${argn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$argn=true" ; unset argn ; argk=true
      else
        unset argk
      fi

      shift && continue
    fi
  else
    if [[ -n "$argn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!argn}" && $MERGEABLE_ARGS\  =~ $argn\  ]] && declare "$argn=${!argn} $1" || declare "$argn=$1"

      unset argn && shift && continue
    fi
  fi

  argt="$argt $1" ; shift

done

[[ -n "$argn" ]] && declare "$argn=true"

unset arg argn argm argk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_ARGS" ]] && main $argv || main ${argt:1}

########################################################################################
